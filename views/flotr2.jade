.container
  h1= title
  h2 Dowloadable and zoomable
  br
  .row
    form#image-download(name='image-download', action='', onsubmit='return false')
      label.lineUp
        input.lineUp(type='radio', name='format', value='png', checked='checked') 
        | PNG
      label.lineUp
        input.lineUp(type='radio', name='format', value='jpeg') 
        | JPEG
      button.lineUp(name='to-image', onclick='CurrentExample(\'to-image\')') To Image
      button.lineUp(name='download', onclick='CurrentExample(\'download\')') Download
      button.lineUp(name='reset', onclick='CurrentExample(\'reset\')') Reset
  .row
    .span8
      #largeGraph.chart_div_large
      h4 Comments
      p Comments will go here
    .span4
      #smallGraphTop.chart_div_small
      #smallGraphMid.chart_div_small
      #smallGraphBot.chart_div_small
script(src='/packages/flotr2/flotr2.min.js', type='text/javascript')
script
  (function () {
    var optionsLG,
        optionsSG,
        d1,
        d2,
        d3,
        i;
        
    for (i = 0; i < 40; i += 0.5) {
      d1.push([i, Math.sin(i)+3*Math.cos(i)]);
      d2.push([i, Math.pow(1.1, i)]);
      d3.push([i, 40 - i+Math.random()*10]);
    }
    
    optionsLG = {
      selection : { mode : 'x', fps : 30 },
      title: 'IV vs Time',
      xaxis:{
        noTicks: 7, // Display 7 ticks.
        tickFormatter: function(n){ return '('+n+')'; }, // => displays tick values between brackets.
        labelsAngle: 45,
        title: 'Time (hours)'
      },
      yaxis:{
        ticks: [[0, "Lower"], 10, 20, 30, [40, "Upper"]],
        title: 'Potential (V)'
      },
      y2axis:{
        ticks: [[0, "Lower"], 10, 20, 30, [40, "Upper"]],
        title: 'Current (A)'
      },
      grid:{
        backgroundColor: 'white'
      },
      HtmlText: false,
      legend: {
        position: 'nw'
      }
    };
    
    optionsSG = {
      selection : { mode : 'x', fps : 30 },
      title: 'Capacity vs Cycle Number',
      xaxis:{
        noTicks: 7, // Display 7 ticks.
        tickFormatter: function(n){ return '('+n+')'; }, // => displays tick values between brackets.
        labelsAngle: 45,
        title: 'Cycle Number'
      },
      yaxis:{
        ticks: [[0, "Lower"], 10, 20, 30, [40, "Upper"]],
        title: 'Capacity (Ah)'
      },
      HtmlText: false,
      legend: {
        position: 'nw'
      }
    };
    
    function mouse_zoom(container, options) {
  
        var
          //d1 = [],
          //d2 = [],
          //d3 = [],
          //options,
          graph,
          //i;

        // Draw graph with default options, overwriting with passed options
        function drawGraph (opts) {
  
          // Clone the options, so the 'options' variable always keeps intact.
          var o = Flotr._.extend(Flotr._.clone(optionsLG), opts || {});
  
          // Return a new graph.
          return Flotr.draw(
            container,
            data,
            o
          );
        }
  
        // Actually draw the graph.
        graph = drawGraph();      
      
        // Hook into the 'flotr:select' event.
        Flotr.EventAdapter.observe(container, 'flotr:select', function (area) {
  
          // Draw graph with new area
          //Note extrea x and y axis info shouldn't need to be passed in, maybe create an object for each axis.
          f = drawGraph({
            xaxis: {
              noTicks: 7, // Display 7 ticks.
              tickFormatter: function(n){ return '('+n+')'; }, // => displays tick values between brackets.
              labelsAngle: 45,
              title: 'x Axis',
              min:area.x1, 
              max:area.x2
            },
            yaxis: {
              ticks: [[0, "Lower"], 10, 20, 30, [40, "Upper"]],
              title: 'y = f(x)',
              min:area.y1, 
              max:area.y2
            }
          });
  
        });

        // When graph is clicked, draw the graph with default area.          
        Flotr.EventAdapter.observe(container, 'flotr:click', function () {
            drawGraph();
        });
    }
    mouse_zoom(document.getElementById("largeGraph", optionsLG));
    mouse_zoom(document.getElementById("smallGraphTop", optionsSG));
    mouse_zoom(document.getElementById("smallGraphMid", optionsSG));
    mouse_zoom(document.getElementById("smallGraphBot", optionsSG));
  })();
  